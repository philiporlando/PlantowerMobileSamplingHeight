un## Canopy Continuum, Diurnal Variation of Urban Air Quality in Six Cities
## Created by Philip Orlando @ Sustainable Atmospheres Research Lab
## 2017-11-29

## import dependencies:
if (!require(plyr)){
  install.packages('plyr')
  library(plyr)
}


if (!require(dplyr)){
  install.packages('dplyr')
  library(dplyr)
}


if (!require(stringr)){
  install.packages('stringr')
  library(stringr)
}



if (!require(openair)){
  install.packages('openair')
  library(openair)
}

if (!require(ggplot2)){
  install.packages('ggplot2')
  library(ggplot2)
}

if (!require(reshape2)){
  install.packages('reshape2')
  library(reshape2)
}

if (!require(tidyverse)){
  install.packages('tidyverse')
  library(tidyverse)
}

if (!require(rgdal)){
  install.packages('rgdal')
  library(rgdal)
}

if (!require(rgeos)){
  install.packages('rgeos')
  library(rgeos)
}

if (!require(classInt)){
  install.packages('classInt')
  library(classInt)
}

if (!require(RColorBrewer)){
  install.packages('RColorBrewer')
  library(RColorBrewer)
}

if (!require(leaflet)){
  install.packages('leaflet')
  library(leaflet)
}

if (!require(lubridate)){
  install.packages('lubridate')
  library(lubridate)
}

if (!require(stringi)){
  install.packages('stringi')
  library(stringi)
}


if (!require(tidyr)){
  install.packages('tidyr')
  library(tidyr)
}


if (!require(gridExtra)){
  install.packages('gridExtra')
  library(gridExtra)
}


if (!require(scales)){
  install.packages('scales')
  library(scales)
}

## creating read functions for processing the raw data:

## since each file has the same header, we only need to create one read function for this!
read.airnow.hourly <- function(fpath) {
  x <- read_csv(fpath, 
           col_types = cols(`Date Local` = col_date(format = "%Y-%m-%d")))
  return(x)
}

## reading in our pre-processed six cities dataframe:
six.city.path <- "./SixCityData/2018-01-11_six_city_hourly.csv"
df <- read.airnow.hourly(six.city.path)

## add some helper variables:
df$county <- df$`County Name`
df$state <- df$`State Name`
df$date <- df$`Date Local`
df$pollutant <- df$`Parameter Name`
df$value <- df$`Sample Measurement`
df$month <- format(strptime(df$date, format = "%Y-%m-%d"), "%B")

## assign "City" variable for each county to reduce cognitive bandwidth for presentation:
df$city <- ifelse(df$county == "Multnomah" & df$state == "Oregon", "Portland",
                  ifelse(df$county == "Ada" & df$state == "Idaho", "Boise",
                         ifelse(df$county == "Pierce" & df$state == "Washington", "Tacoma",
                                ifelse(df$county == "Bernalillo" & df$state == "New Mexico", "Albuquerque",
                                       ifelse(df$county == "Sacramento" & df$state == "California", "Sacramento",
                                              ifelse(df$county == "Salt Lake" & df$state == "Utah", "Salt Lake City",
                                                     NA))))))


## remove unnecessary variables:
df <- df %>%
  select(date, city, pollutant, season, month, hour, value)

## order the factor levels:
df$season <- factor(df$season, levels=c("Spring","Summer","Autumn","Winter"))
df$month <- factor(df$month, levels=c("January","February","March","April", "May", "June", "July", "August", "September", "October", "November", "December"))
## df$county <- factor(df$county, levels=c("Bernalillo", "Ada", "Multnomah","Sacramento","Salt Lake","Pierce"))
df$city <- factor(df$city, levels=c("Albuquerque", "Boise", "Portland", "Sacramento", "Salt Lake City", "Tacoma"))




## create an aggregated subset for each hour for each season for each pollutant for each city:
sub <- df %>% group_by(city, month, pollutant, hour) %>%
  summarize(value = mean(value))

## sub$hour <- format(sub$hour, "%H")

## sub$hour <- format(strptime(sub$hour, format = "%H:%M:%S"), "%H:%M")

## sub$hour <- lubridate::hms(sub$hour)
## sub$hour <- as.POSIXct(sub$hour, format = "%Y-%m-%d %H:%M:%S")

## sub$hour <- chron::times(format(sub$hour, format = "%H:%M:%S"))
## sub$hour <- as.POSIXct(sub$hour, format = "%H:%M:%S")

## maintain the same color palette:
hue_pal()(6)
cols <- c("Albuquerque" = "#B79F00", "Boise" = "#F8766D",  "Portland" = "#00BA38",  "Sacramento" = "#619CFF", "Salt Lake City" = "#F564E3", "Tacoma" = "#00BFC4")

## create a legend text size object
legend_size <- 10
## Left off here on 2017-12-01:

## Left off here on 2017-12-01:

## create individual figures based on the pollutant:
monthly_pm_2_5 <- ggplot(filter(sub, pollutant == "Acceptable PM2.5 AQI & Speciation Mass"), aes(x = as.POSIXct(hour, "%H:%M"), y = value, color = as.factor(city), fill = as.factor(city))) + 
  geom_line(lwd = 1.1) +
  ## geom_smooth() + 
  facet_wrap(~month) + 
  ylab(expression(~PM[2.5]~(mu*g*m^-3))) +
  xlab("Hour") + 
  scale_x_datetime(date_breaks = "4 hour", date_labels = "%H") + 
  ggtitle("Fine Particulate Matter, 2013 - 2017") + 
  theme_bw() + 
  ## Renaming our Legend Title using guides():
  guides(color=guide_legend(title="City")) +
  scale_color_manual(values = cols) + 
  ## Making small adjustments to our axis labels, titles, fonts, sizes, etc. with theme():
  theme(plot.title = element_text(hjust=0.5, size = 20, face = "bold"),
        axis.text.x = element_text(size=rel(1.0), face = "bold", colour = "black", angle = 0, hjust = 0.5),
        axis.text.y = element_text(size=rel(1.5), face = "bold", colour = "black"),
        axis.title.y = element_text(size=20, face = "bold"),
        axis.title.x = element_text(size=10, face = "bold"),
        strip.text.y = element_text(angle = 270, size = 20, face = "bold"),
        strip.text.x = element_text(size = 15, face = "bold"), 
        legend.title = element_text(face="bold", size = legend_size + 2),
        legend.text = element_text(face="bold", size = legend_size))

monthly_pm_2_5


## create individual figures based on the pollutant:
monthly_pm_2_5_fem <- ggplot(filter(sub, pollutant ==  "PM2.5 - Local Conditions"), aes(x = as.POSIXct(hour, "%H:%M"), y = value, color = as.factor(city), fill = as.factor(city))) + 
  geom_line(lwd = 1.1) +
  ## geom_smooth() + 
  facet_wrap(~month) + 
  ylab(expression(~PM[2.5]~(mu*g*m^-3))) +
  xlab("Hour") + 
  scale_x_datetime(date_breaks = "4 hour", date_labels = "%H") + 
  ggtitle("Fine Particulate Matter, 2013 - 2017") + 
  theme_bw() + 
  ## Renaming our Legend Title using guides():
  guides(color=guide_legend(title="City")) +
  scale_color_manual(values = cols) + 
  ## Making small adjustments to our axis labels, titles, fonts, sizes, etc. with theme():
  theme(plot.title = element_text(hjust=0.5, size = 20, face = "bold"),
        axis.text.x = element_text(size=rel(1.0), face = "bold", colour = "black", angle = 0, hjust = 0.5),
        axis.text.y = element_text(size=rel(1.5), face = "bold", colour = "black"),
        axis.title.y = element_text(size=20, face = "bold"),
        axis.title.x = element_text(size=10, face = "bold"),
        strip.text.y = element_text(angle = 270, size = 20, face = "bold"),
        strip.text.x = element_text(size = 15, face = "bold"), 
        legend.title = element_text(face="bold", size = legend_size + 2),
        legend.text = element_text(face="bold", size = legend_size))

monthly_pm_2_5_fem



## create individual figures based on the pollutant:
monthly_no2 <- ggplot(filter(sub, pollutant == "Nitrogen dioxide (NO2)"), aes(x = as.POSIXct(hour, "%H:%M"), y = value, color = as.factor(city), fill = as.factor(city))) + 
  geom_line(lwd = 1.1) +
  ylab(expression(~NO[2]~"(ppb)")) +
  xlab("Hour") + 
  ggtitle("Nitrogen Dioxide, 2013 - 2017") + 
  theme_bw() + 
  scale_x_datetime(date_breaks = "4 hour", date_labels = "%H") + 
  ## Renaming our Legend Title using guides():
  guides(color=guide_legend(title="City")) + 
  facet_wrap(~month) + 
  scale_color_manual(values = cols) + 
  ## Making small adjustments to our axis labels, titles, fonts, sizes, etc. with theme():
  theme(plot.title = element_text(hjust=0.5, size = 20, face = "bold"),
        axis.text.x = element_text(size=rel(1.0), face = "bold", colour = "black", angle = 0, hjust = 0.5),
        axis.text.y = element_text(size=rel(1.5), face = "bold", colour = "black"),
        axis.title.y = element_text(size=20, face = "bold"),
        axis.title.x = element_text(size=10, face = "bold"),
        strip.text.y = element_text(angle = 270, size = 20, face = "bold"),
        strip.text.x = element_text(size = 15, face = "bold"), 
        legend.title = element_text(face="bold", size = legend_size + 2),
        legend.text = element_text(face="bold", size = legend_size))

monthly_no2


## create individual figures based on the pollutant:
monthly_co <- ggplot(filter(sub, pollutant == "Carbon monoxide"), aes(x = as.POSIXct(hour, "%H:%M"), y = value, color = as.factor(city), fill = as.factor(city))) + 
  geom_line(lwd = 1.1) +
  ylab(expression(~CO~"(ppm)")) + 
  xlab("Hour") + 
  ggtitle("Carbon Monoxide, 2013 - 2017") + 
  theme_bw() + 
  guides(color=guide_legend(title="City")) + 
  scale_x_datetime(date_breaks = "4 hour", date_labels = "%H") + 
  facet_wrap(~month) + 
  scale_color_manual(values = cols) + 
  ## Making small adjustments to our axis labels, titles, fonts, sizes, etc. with theme():
  theme(plot.title = element_text(hjust=0.5, size = 20, face = "bold"),
        axis.text.x = element_text(size=rel(1.0), face = "bold", colour = "black", angle = 0, hjust = 0.5),
        axis.text.y = element_text(size=rel(1.5), face = "bold", colour = "black"),
        axis.title.y = element_text(size=20, face = "bold"),
        axis.title.x = element_text(size=10, face = "bold"),
        strip.text.y = element_text(angle = 270, size = 20, face = "bold"),
        strip.text.x = element_text(size = 15, face = "bold"), 
        legend.title = element_text(face="bold", size = legend_size + 2),
        legend.text = element_text(face="bold", size = legend_size))

monthly_co

## create individual figures based on the pollutant:
monthly_pm_10 <- ggplot(filter(sub, pollutant == "PM10 Total 0-10um STP"), aes(x = as.POSIXct(hour, "%H:%M"), y = value, color = as.factor(city), fill = as.factor(city))) + 
  geom_line(lwd = 1.1) +
  ## geom_smooth() + 
  facet_wrap(~month) + 
  ylab(expression(~PM[10]~(mu*g*m^-3))) + 
  xlab("Hour") + 
  ## scale_x_datetime(date_breaks = "1 hour", date_labels = "%H:%M") + 
  ggtitle("Coarse Particulate Matter, 2013 - 2017") + 
  scale_x_datetime(date_breaks = "4 hour", date_labels = "%H") + 
  theme_bw() + 
  ## Renaming our Legend Title using guides():
  guides(color=guide_legend(title="City")) +
  scale_color_manual(values = cols) + 
  ## Making small adjustments to our axis labels, titles, fonts, sizes, etc. with theme():
  theme(plot.title = element_text(hjust=0.5, size = 20, face = "bold"),
        axis.text.x = element_text(size=rel(1.0), face = "bold", colour = "black", angle = 0, hjust = 0.5),
        axis.text.y = element_text(size=rel(1.5), face = "bold", colour = "black"),
        axis.title.y = element_text(size=20, face = "bold"),
        axis.title.x = element_text(size=10, face = "bold"),
        strip.text.y = element_text(angle = 270, size = 20, face = "bold"),
        strip.text.x = element_text(size = 15, face = "bold"), 
        legend.title = element_text(face="bold", size = legend_size + 2),
        legend.text = element_text(face="bold", size = legend_size))

monthly_pm_10



## create individual figures based on the pollutant:
monthly_o3 <- ggplot(filter(sub, pollutant == "Ozone"), aes(x = as.POSIXct(hour, "%H:%M"), y = value, color = as.factor(city), fill = as.factor(city))) + 
  geom_line(lwd = 1.1) +
  ## geom_smooth() + 
  facet_wrap(~month) + 
  ylab(expression(~O[3]~(ppm))) + 
  xlab("Hour") + 
  ## scale_x_datetime(date_breaks = "1 hour", date_labels = "%H:%M") + 
  ggtitle("Ozone, 2013 - 2017") + 
  scale_x_datetime(date_breaks = "4 hour", date_labels = "%H") + 
  theme_bw() + 
  ## Renaming our Legend Title using guides():
  guides(color=guide_legend(title="City")) +
  scale_color_manual(values = cols) + 
  ## Making small adjustments to our axis labels, titles, fonts, sizes, etc. with theme():
  theme(plot.title = element_text(hjust=0.5, size = 20, face = "bold"),
        axis.text.x = element_text(size=rel(1.0), face = "bold", colour = "black", angle = 0, hjust = 0.5),
        axis.text.y = element_text(size=rel(1.5), face = "bold", colour = "black"),
        axis.title.y = element_text(size=20, face = "bold"),
        axis.title.x = element_text(size=10, face = "bold"),
        strip.text.y = element_text(angle = 270, size = 20, face = "bold"),
        strip.text.x = element_text(size = 15, face = "bold"), 
        legend.title = element_text(face="bold",size = legend_size + 2),
        legend.text = element_text(face="bold", size = legend_size))

monthly_o3



## create individual figures based on the pollutant:
monthly_temp <- ggplot(filter(sub, pollutant == "Outdoor Temperature"), aes(x = as.POSIXct(hour, "%H:%M"), y = value, color = as.factor(city), fill = as.factor(city))) + 
  geom_line(lwd = 1.1) +
  ## geom_smooth() + 
  facet_wrap(~month) + 
  ylab(expression(~Temperature~(degree*"F"))) + 
  xlab("Hour") + 
  ## scale_x_datetime(date_breaks = "1 hour", date_labels = "%H:%M") + 
  ggtitle("Temperature, 2013 - 2017") + 
  scale_x_datetime(date_breaks = "4 hour", date_labels = "%H") + 
  theme_bw() + 
  ## Renaming our Legend Title using guides():
  guides(color=guide_legend(title="City")) +
  scale_color_manual(values = cols) + 
  ## Making small adjustments to our axis labels, titles, fonts, sizes, etc. with theme():
  theme(plot.title = element_text(hjust=0.5, size = 20, face = "bold"),
        axis.text.x = element_text(size=rel(1.0), face = "bold", colour = "black", angle = 0, hjust = 0.5),
        axis.text.y = element_text(size=rel(1.5), face = "bold", colour = "black"),
        axis.title.y = element_text(size=20, face = "bold"),
        axis.title.x = element_text(size=10, face = "bold"),
        strip.text.y = element_text(angle = 270, size = 20, face = "bold"),
        strip.text.x = element_text(size = 15, face = "bold"), 
        legend.title = element_text(face="bold",size = legend_size + 2),
        legend.text = element_text(face="bold", size = legend_size))

monthly_temp



## grouping four pollutants together on one plotting window:

grid.arrange(monthly_pm_2_5, monthly_pm_10, monthly_o3, monthly_no2)

## arrangeGrob is required for saving grid.arrange plots:
monthly_grid <- arrangeGrob(monthly_pm_2_5, monthly_pm_10, monthly_o3, monthly_no2)

## We can save our plot in a high-res png using ggsave():
ggsave(filename = paste0("./Figures/", format(Sys.time(), "%Y-%m-%d"), "_geom_line_six_city_monthly_full.png"),
       plot = monthly_grid,
       scale = 1,
       width = 16,
       height = 10,
       units = "in",
       dpi = 900)

## save each individual file too:
ggsave(filename = paste0("./Figures/", format(Sys.time(), "%Y-%m-%d"), "_geom_line_six_city_monthly_pm25.png"),
       plot = monthly_pm_2_5,
       scale = 1,
       width = 16,
       height = 10,
       units = "in",
       dpi = 900)

ggsave(filename = paste0("./Figures/", format(Sys.time(), "%Y-%m-%d"), "_geom_line_six_city_monthly_pm10.png"),
       plot = monthly_pm_10,
       scale = 1,
       width = 16,
       height = 10,
       units = "in",
       dpi = 900)

ggsave(filename = paste0("./Figures/", format(Sys.time(), "%Y-%m-%d"), "_geom_line_six_city_monthly_o3.png"),
       plot = monthly_o3,
       scale = 1,
       width = 16,
       height = 10,
       units = "in",
       dpi = 900)

ggsave(filename = paste0("./Figures/", format(Sys.time(), "%Y-%m-%d"), "_geom_line_six_city_monthly_no2.png"),
       plot = monthly_no2,
       scale = 1,
       width = 16,
       height = 10,
       units = "in",
       dpi = 900)

ggsave(filename = paste0("./Figures/", format(Sys.time(), "%Y-%m-%d"), "_geom_line_six_city_monthly_co.png"),
       plot = monthly_co,
       scale = 1,
       width = 16,
       height = 10,
       units = "in",
       dpi = 900)

ggsave(filename = paste0("./Figures/", format(Sys.time(), "%Y-%m-%d"), "_geom_line_six_city_monthly_temp.png"),
       plot = monthly_temp,
       scale = 1,
       width = 16,
       height = 10,
       units = "in",
       dpi = 900)



############################### By LOCAL SITE NAME ########################################

